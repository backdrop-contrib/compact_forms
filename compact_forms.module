<?php
// $Id$

/**
 * @file
 * Compact Forms Drupal module.
 */

/**
 * Implementation of hook_help().
 */
function compact_forms_help($section) {
  switch ($section) {
    case 'admin/help#help':
      return '<p>' . t('Makes form fields compact by overlaying the field label on top the field itself using jQuery.') . '</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function compact_forms_perm() {
  return array('administer Compact Forms');
}

/**
 * Implementation of hook_form_alter().
 */
function compact_forms_form_alter($form_id, &$form) {
  static $ids;

  $field_size = variable_get('compact_forms_field_size', '');
  $descriptions = variable_get('compact_forms_descriptions', 1);
  // Nothing to do if no custom field size was configured and form element
  // descriptions shall not be hidden.
  if (empty($field_size) && !empty($descriptions)) {
    return;
  }

  if (!isset($ids)) {
    $ids = explode("\n", str_replace('-', '_', variable_get('compact_forms_ids', "user-login-form")));
  }
  if (in_array($form_id, $ids)) {
    _compact_forms_resize_fields($form, $field_size, $descriptions);
  }
}

/**
 * Iterator.
 */
function _compact_forms_resize_fields(&$form, $field_size, $descriptions) {
  if (empty($form) || !is_array($form)) {
    return;
  }
  foreach (element_children($form) as $key) {
    if (!isset($form[$key]['#type'])) {
      continue;
    }
    switch ($form[$key]['#type']) {
      case 'fieldset':
        _compact_forms_resize_fields($form[$key], $field_size, $descriptions);
        break;

      case 'textfield':
      case 'password':
      case 'password_confirm':
        if (!empty($field_size)) {
          $form[$key]['#size'] = $field_size;
        }
        if (!$descriptions) {
          unset($form[$key]['#description']);
        }
        break;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function compact_forms_menu($may_cache) {
  global $user;

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'title' => t('Compact Forms'),
      'path' => 'admin/settings/compact_forms',
      'description' => t('Makes form fields compact by overlaying the field label on top the field itself using jQuery.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'compact_forms_admin_form',
      'access' => user_access('administer Compact Forms'),
    );
  }
  else {
    if (strpos($_GET['q'], 'admin/settings/compact_forms') === 0) {
      require_once drupal_get_path('module', 'compact_forms') . '/compact_forms.admin.inc';
    }
    // Load our behavior.
    _compact_forms_include_js();
  }
  return $items;
}

/**
 * Include JavaScript and CSS and attach behaviors to all selected forms.
 */
function _compact_forms_include_js() {
  $ids = explode("\n", variable_get('compact_forms_ids', 'user-login-form'));
  $ids = array_filter(array_map('trim', $ids));

  if (!empty($ids)) {
    $path = drupal_get_path('module', 'compact_forms');
    drupal_add_js($path . '/compact_forms.js');
    drupal_add_css($path . '/compact_forms.css');

    $settings = array(
      'compactForms' => array(
        'forms' => $ids,
        'stars' => (int) variable_get('compact_forms_stars', 2),
        'colons' => (int) variable_get('compact_forms_colons', 0),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}

