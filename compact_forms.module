<?php
/**
 * @file
 * Simplify forms by hiding field labels and using placeholder text instead.
 */

/**
 * Implements hook_config_info().
 */
function compact_forms_config_info() {
  return array(
    'compact_forms.settings' => array(
      'label' => t('Compact forms settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function compact_forms_permission() {
  return array(
    'administer Compact Forms' => array(
      'title' => t('Administer Compact Forms'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function compact_forms_menu() {
  return array(
    'admin/config/user-interface/compact_forms' => array(
      'title' => 'Compact forms',
      'description' => 'Configure Compact Forms settings.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('compact_forms_admin_form'),
      'access arguments' => array('administer Compact Forms'),
    ),
  );
}

/**
 * Form constructor for Compact Forms settings.
 */
function compact_forms_admin_form($form, &$form_state) {
  $config = config('compact_forms.settings');
  $form['#config'] = 'compact_forms.settings';

  $form['forms'] = array(
    '#type' => 'textarea',
    '#title' => t('Forms'),
    '#description' => t("Enter one form ID per line. Look for the 'form_id' element in the form's markup (e.g. 'contact_site_form')."),
    '#default_value' => implode("\n", $config->get('forms')),
    '#rows' => 5,
  );
  $form['description'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide field descriptions'),
    '#default_value' => $config->get('description'),
  );
  $form['required'] = array(
    '#type' => 'radios',
    '#title' => t('Required marker'),
    '#description' => t("Where to display the marker (e.g. red asterix) for required fields. Regardless of this setting, required fields will still have a 'required' class that can be used for custom styling."),
    '#options' => array(
      'none' => t("Don't display marker"),
      'placeholder' => t('Add marker to the placeholder'),
      'suffix' => t('Add marker after the field'),
    ),
    '#default_value' => $config->get('required'),
  );
  $form['size'] = array(
    '#type' => 'number',
    '#title' => t('Field size'),
    '#description' => t('Override the size of all compact text fields.'),
    '#default_value' => $config->get('size'),
    '#min' => 1,
    '#max' => 255,
    '#field_suffix' => t('characters'),
  );

  return system_settings_form($form);
}

/**
 * Custom validation for Compact Forms settings.
 */
function compact_forms_admin_form_validate($form, &$form_state) {
  // Convert Forms string to array.
  $forms = explode("\n", $form_state['values']['forms']);
  $form_state['values']['forms'] = array_values(array_filter(array_map('trim', $forms)));
}

/**
 * Implements hook_form_alter().
 */
function compact_forms_form_alter(&$form, $form_state, $form_id) {
  $config = config('compact_forms.settings');

  if (in_array($form_id, $config->get('forms'))) {
    // If the #compact_forms property is FALSE, don't process this form.
    if (isset($form['#compact_forms']) && !$form['#compact_forms']) {
      return;
    }

    // Process fields.
    _compact_forms_process_fields($form, $config);
  }
}

/**
 * Helper function to recursively alter form elements.
 */
function _compact_forms_process_fields(&$form, $config) {
  $description = $config->get('description');
  $required_marker = $config->get('required');
  $size = $config->get('size');

  foreach (element_children($form) as $key) {
    (!empty($form[$key]['#required'])) ? $required = $form[$key]['#required'] : $required = 0;
    if (isset($form[$key]['#type'])) {
      switch ($form[$key]['#type']) {
        case 'email':
        case 'machine_name':
        case 'number':
        case 'password':
        case 'password_confirm':
        case 'search':
        case 'text_format':
        case 'textarea':
        case 'textfield':
        case 'url':
        case 'webform_email':
          // Add the title as placeholder text.
          if (isset($form[$key]['#title'])) {
            $form[$key]['#attributes']['placeholder'] = $form[$key]['#title'];
            unset($form[$key]['#title']);

            if ($required && $required_marker == 'placeholder') {
              $form[$key]['#attributes']['placeholder'] .= ' *';
            }
          }

        case 'select':
        case 'select_or_other':
          // Add the title as the first, empty option.
          if (isset($form[$key]['#title'])) {
            $form[$key]['#empty_option'] = '- ' . $form[$key]['#title'];
            unset($form[$key]['#title']);

            if ($required && $required_marker == 'placeholder') {
              $form[$key]['#empty_option'] .= ' * -';
            }
            else {
              $form[$key]['#empty_option'] .= ' -';
            }
          }

        case 'email':
        case 'machine_name':
        case 'number':
        case 'password':
        case 'password_confirm':
        case 'search':
        case 'select':
        case 'select_or_other':
        case 'text_format':
        case 'textarea':
        case 'textfield':
        case 'url':
        case 'webform_email':
          // Add the required element as a suffix.
          if (isset($form[$key]['#title']) && $required && $required_marker == 'suffix') {
            $form[$key]['#field_suffix'] = '<abbr class="form-required" title="' . t('This field is required.') . '">*</abbr>';
          }

          // Override field size.
          if (!empty($size)) {
            if (in_array($form[$key]['#type'], array('text_format', 'textarea'))) {
              $form[$key]['#cols'] = $size;
            }
            else {
              $form[$key]['#size'] = $size;
            }
          }

          // Hide description.
          if ($description && isset($form[$key]['#description'])) {
            unset($form[$key]['#description']);
          }
          break;

        default:
          // Recurse through all other element types with children.
          if (!empty(element_children($form[$key]))) {
            _compact_forms_process_fields($form[$key], $config);
          }
      }
    }
    else {
      // Recurse through any children.
      if (!empty(element_children($form[$key]))) {
        _compact_forms_process_fields($form[$key], $config);
      }
    }
  }
}
